generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  BUSINESS_PARTNER
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DISABLED
}

model User {
  id                       String          @id @default(uuid())
  email                    String?         @unique
  emailVerified            Boolean         @default(false)
  emailVerificationExpires DateTime? //24h
  emailVerificationToken   String?         @unique
  password                 String?
  passwordResetToken       String?         @unique
  passwordResetExpires     DateTime? //4h
  role                     UserRole        @default(CUSTOMER)
  status                   UserStatus      @default(ACTIVE)
  reActiveToken            String?         @unique
  reActiveExpires          DateTime? //4h
  firstName                String
  lastName                 String
  picture                  String?
  phoneNumber              String          @default("")
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  oauthProviders           OauthProvider[]
  mfa                      MFA?
  Post                     Post[]

  @@index([email, emailVerificationToken, passwordResetToken, reActiveToken])
}

model OauthProvider {
  providerId String
  provider   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([provider, providerId])
}

model MFA {
  secretKey       String
  lastAccess      DateTime @updatedAt
  backupCodes     String[]
  backupCodesUsed String[] @default([])
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId])
  @@index([backupCodes, backupCodesUsed])
}

enum PostForEnum {
  BLOG
  PRODUCT
}

model PostCategory {
  id           String      @id @default(uuid())
  categoryFor  PostForEnum
  categoryName String
  categorySlug String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Post         Post[]

  @@unique([categoryFor, categoryName, categorySlug])
  @@index([categoryFor, categoryName, categorySlug])
}

model PostTag {
  tagFor      PostForEnum
  tagName     String
  createdAt   DateTime      @default(now())
  PostWithTag PostWithTag[]

  @@id([tagFor, tagName])
  @@index([tagFor, tagName])
}

model PostWithTag {
  tagFor  PostForEnum
  tagName String
  postId  String
  tag     PostTag     @relation(fields: [tagFor, tagName], references: [tagFor, tagName])
  post    Post        @relation(fields: [postId], references: [id])

  @@id([tagFor, tagName, postId])
}

model PostMore {
  id               String             @id @default(uuid())
  key              String
  value            String
  PostWithPostMore PostWithPostMore[]

  @@index([key])
}

model PostWithPostMore {
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postMore PostMore @relation(fields: [postMoreId], references: [id], onDelete: Cascade)

  postId     String
  postMoreId String

  @@id([postId, postMoreId])
}

enum PostStatus {
  DRAFT
  DISABLE
  PUBLISH
}

model Post {
  id          String             @id @default(uuid())
  images      String[]
  title       String
  slug        String
  postFor     PostForEnum
  categoryId  String
  category    PostCategory       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  postMores   PostWithPostMore[]
  tags        PostWithTag[]
  status      PostStatus
  content     String
  createdById String
  createdBy   User               @relation(fields: [createdById], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique([slug, postFor])
  @@index([postFor, title, slug])
}
