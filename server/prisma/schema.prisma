generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  BUSINESS_PARTNER
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DISABLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id                       String           @id @default(uuid())
  email                    String?          @unique
  emailVerified            Boolean          @default(false)
  emailVerificationExpires DateTime? //24h
  emailVerificationToken   String?          @unique
  password                 String?
  passwordResetToken       String?          @unique
  passwordResetExpires     DateTime? //4h
  role                     UserRole         @default(CUSTOMER)
  status                   UserStatus       @default(ACTIVE)
  reActiveToken            String?          @unique
  reActiveExpires          DateTime? //4h
  firstName                String
  lastName                 String
  birthDate                String?
  gender                   Gender?
  picture                  String?
  phoneNumber              String?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  oauthProviders           OauthProvider[]
  mfa                      MFA?
  articleContent           ArticleContent[]
  productContent           ProductContent[]
  address                  Address[]

  @@index([email, emailVerificationToken, passwordResetToken, reActiveToken])
}

model Address {
  id          String  @id @default(uuid())
  phoneNumber String
  address     String
  idDefault   Boolean
  userId      String
  user        User    @relation(fields: [userId], references: [id])
}

model OauthProvider {
  providerId String
  provider   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([provider, providerId])
}

model MFA {
  secretKey       String
  lastAccess      DateTime @updatedAt
  backupCodes     String[]
  backupCodesUsed String[] @default([])
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId])
  @@index([backupCodes, backupCodesUsed])
}

model ArticleContentCategory {
  id             String           @id @default(uuid())
  categoryName   String
  categorySlug   String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  articleContent ArticleContent[]

  @@unique([categoryName, categorySlug])
  @@index([categoryName, categorySlug])
}

model ArticleContentTag {
  tagName               String
  createdAt             DateTime                @default(now())
  articleContentWithTag ArticleContentWithTag[]

  @@id([tagName])
  @@index([tagName])
}

model ArticleContentWithTag {
  tagName          String
  articleContentId String
  tag              ArticleContentTag @relation(fields: [tagName], references: [tagName])
  post             ArticleContent    @relation(fields: [articleContentId], references: [id])

  @@id([tagName, articleContentId])
}

enum ContentStatus {
  DRAFT
  DISABLE
  PUBLISH
}

model ArticleContent {
  id          String                  @id @default(uuid())
  image       String
  title       String
  slug        String                  @unique
  categoryId  String
  category    ArticleContentCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tags        ArticleContentWithTag[]
  status      ContentStatus
  content     String
  createdById String
  publishAt   DateTime

  createdBy User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title, slug])
}

model ProductContentCategory {
  id             String           @id @default(uuid())
  categoryName   String
  categorySlug   String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  productContent ProductContent[]

  @@unique([categoryName, categorySlug])
  @@index([categoryName, categorySlug])
}

model ProductContentTag {
  tagName               String
  createdAt             DateTime                @default(now())
  productContentWithTag ProductContentWithTag[]

  @@id([tagName])
  @@index([tagName])
}

model ProductContentWithTag {
  tagName          String
  productContentId String
  tag              ProductContentTag @relation(fields: [tagName], references: [tagName])
  product          ProductContent    @relation(fields: [productContentId], references: [id])

  @@id([tagName, productContentId])
}

model ProductContent {
  id          String                  @id @default(uuid())
  images      String[]
  title       String
  slug        String                  @unique
  status      ContentStatus
  tags        ProductContentWithTag[]
  categoryId  String
  category    ProductContentCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  content     String
  createdById String
  createdBy   User                    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  code        String
  description String
  benefits    String[]
  ingredients String[]
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt

  @@index([title, slug])
}
