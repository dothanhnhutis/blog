generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  SALER
  BLOGER
  CUSTOMER
}

enum Status {
  ACTIVE
  SUSPENDED
  DISABLED
}

model User {
  id                       String          @id @default(uuid())
  email                    String?         @unique
  emailVerified            Boolean         @default(false)
  emailVerificationExpires DateTime? //24h
  emailVerificationToken   String?         @unique
  password                 String?
  passwordResetToken       String?         @unique
  passwordResetExpires     DateTime? //4h
  mFAEnabled               Boolean         @default(false)
  role                     Role            @default(CUSTOMER)
  status                   Status          @default(ACTIVE)
  reActiveToken            String?         @unique
  reActiveExpires          DateTime? //4h
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  oauthProviders           OauthProvider[]
  // posts                    Post[]
  // products                 Product[]
  mFA                      MFA?
  profile                  Profile?
  taskAssignees            TaskAssignees[]
  task                     Task[]

  @@index([email, passwordResetToken, reActiveToken])
}

model OauthProvider {
  id         String   @id @default(uuid())
  providerId String
  provider   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([provider, providerId])
  @@index([userId, provider, providerId])
}

model MFA {
  id              String   @id @default(uuid())
  secretKey       String
  lastTwoFATime   DateTime @updatedAt
  backupCodes     String[]
  backupCodesUsed String[] @default([])
  userId          String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, backupCodes, backupCodesUsed])
}

model Profile {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  photo      String?
  coverPhoto String?
  phone      String   @default("")
  address    String   @default("")
  bio        String   @default("")
  urls       String[] @default([])
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum TaskStatus {
  TO_DO
  ON_PROGRESS
  IN_REVIEW
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model TaskAssignees {
  userId String
  user   User   @relation(fields: [userId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  @@id([userId, taskId])
}

model TagTask {
  name      String
  TagToTask TagToTask[]

  @@id([name])
}

model TagToTask {
  tagName String
  tag     TagTask @relation(fields: [tagName], references: [name])
  taskId  String
  task    Task    @relation(fields: [taskId], references: [id])

  @@id([tagName, taskId])
}

model Task {
  id            String          @id @default(uuid())
  name          String
  description   String
  status        TaskStatus      @default(TO_DO)
  tags          TagToTask[]
  startDate     DateTime
  dueDate       DateTime
  priority      TaskPriority
  createdBy     User            @relation(fields: [createdById], references: [id])
  createdById   String
  subTask       SubTask[]
  taskAssignees TaskAssignees[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model SubTask {
  id           String   @id @default(uuid())
  subTaskName  String
  enableUpload Boolean  @default(false)
  parentTask   Task     @relation(fields: [parentTaskId], references: [id])
  parentTaskId String
  message      String   @default("")
  isDone       Boolean  @default(false)
  attachment   String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
