generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Manager
  Saler
  Bloger
  Customer
}

enum Status {
  Active
  Suspended
  Disabled
}

model User {
  id                       String          @id @default(uuid())
  email                    String?         @unique
  emailVerified            Boolean         @default(false)
  emailVerificationExpires DateTime? //24h
  emailVerificationToken   String?         @unique
  // hasPassword          Boolean         @default(false)
  password                 String?
  passwordResetToken       String?         @unique
  passwordResetExpires     DateTime? //4h
  mFAEnabled               Boolean         @default(false)
  role                     Role            @default(Customer)
  status                   Status          @default(Active)
  reActiveToken            String?         @unique
  reActiveExpires          DateTime? //4h
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  oauthProviders           OauthProvider[]
  // posts                    Post[]
  // products                 Product[]
  mFA                      MFA?
  profile                  Profile?

  @@index([email, passwordResetToken, reActiveToken])
}

model OauthProvider {
  id         String   @id @default(uuid())
  providerId String
  provider   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([provider, providerId])
  @@index([userId, provider, providerId])
}

model MFA {
  id              String   @id @default(uuid())
  secretKey       String
  lastTwoFATime   DateTime @updatedAt
  backupCodes     String[]
  backupCodesUsed String[] @default([])
  userId          String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, backupCodes, backupCodesUsed])
}

model Profile {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  photo      String?
  coverPhoto String?
  phone      String   @default("")
  address    String   @default("")
  bio        String   @default("")
  urls       String[] @default([])
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String[]   @default([])
  status      TaskStatus

  // assignedTo   User? @relation(fields: [assignedToId], references: [id])
  // assignedToId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
